## Collaborator means "shared right to edit" (e.g. in playlists)
## Contributor means "helped make this" (e.g. in an Album)
union Collaborator = Artist | NoPlatformUser
union Contributor = Artist | NoPlatformUser

type Query {
  getUser(userId: ID): User

  getArtist(artistId: ID): Artist
  # artistList(top: Int!): [Artist!]!

  getAlbumDetails(albumId: ID!): Album
  getArtistAlbums(artistId: ID!, max: Int = 5): [Album!]!

  getRecentArtistReleases(artistId: ID!): [Album]!

  getFeaturedArtists(max: Int = 7): [Artist!]!
  getFeaturedAlbums(max: Int = 5): [Album!]!
  getFeaturedSongs(max: Int = 8): [Song!]!
  getFeaturedPlaylists(max: Int = 4): [Playlist!]!

  getSongDetails(songId: ID): Song
  getSongListDetails(songs: [ID!]!): [Song]!
}

type Mutation {
  # USER
  createUser: User
  updateUser(
    userId: ID!,
    userData: UserInput!
  ): User

  createUserAndArtist: User

  # ARTIST
  createArtist(
    userId: ID!,
    artistData: ArtistInput
  ): Artist
  updateArtist(
    artistId: ID!,
    artistData: ArtistInput!
  ): Artist
  deleteArtist(
    artistId: ID!
  ): Artist


  # ALBUM
  createAlbum(
    albumData: AlbumInput!
  ): Album
  updateAlbum(
    albumId: ID!,
    albumData: AlbumInput!
  ): Album
  deleteAlbum(albumId: ID!): Album

  # SONG
  createSong(
    songId: ID!,
    songData: SongInput
  ): Song
  updateSong(
    songId: ID!,
    songData: SongInput!
  ): Song
  deleteSong(
    songId: ID!
  ): Song
}

type Subscription {
  onCreatedAlbum(artistId: ID!): Album
    @aws_subscribe(mutations: ["createAlbum"])
}
type User {
  userId: ID!
  artist: Artist
  joinedAt: Int
  email: String
  name: String
  username: String
}
type NoPlatformUser {
  name: String!
}

type Artist {
  artistId: ID!
  name: String!
  songs: [Song]!
  albums: [Album]!
  playlists: [Playlist]!
  joinedAt: Int
  imageSource: String
  user: User
  status: String!
}

type Song {
  songId: ID!
  title: String!
  contributors: [Contributor]!
  artist: Artist!
  album: Album!
  audioSource: String
  imageSource: String
  releaseAt: Int
}

type Playlist {
  playlistId: ID!
  title: String!
  songs: [Song]!
  artist: Artist!
  collaborators: [Collaborator]
}

type Album {
  albumId: ID!
  title: String!
  artist: Artist!
  story: AWSJSON,
  releasedDate: AWSDateTime
  createdAt: AWSTimestamp
  lastUpdated: AWSTimestamp
  contributors: [Contributor]
  songs: [Song]!
  imageSource: String
}

input AlbumInput {
  title: String!
  artist: ArtistInput!
  story: AWSJSON
  releasedDate: AWSDateTime
  createdAt: AWSTimestamp
  lastUpdated: AWSTimestamp
  contributors: [ContributorInput]
  songs: [Song]!
  imageSource: String
}
input SongInput {
  title: String!
  contributors: [ContributorInput]
  artist: ArtistInput!
  album: String!
  audioSource: String
  imageSource: String
  releasedDate: Int
}
input UserInput {
    artistId: ID
    name: String
    email: AWSEmail
}
input ArtistInput {
  username: ID
  name: String
  imageSource: AWSURL
}
input ContributorInput {
  ## When an artistId is provided, `name` should be discarded. `name` gives the possibility to just type a person's name when he/she is not on the platform
  artistId: ID
  name: String
}
input CollaboratorInput {
  ## When an artistId is provided, `name` should be discarded. `name` gives the possibility to just type a person's name when he/she is not on the platform
  artistId: ID
  name: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
