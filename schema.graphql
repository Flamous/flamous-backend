type Query {
  user(userId: ID): User

  artist(artistId: ID): Artist
  artistList(top: Int!): [Artist!]!

  album(albumId: ID): Album
  albumList(artistId: ID!, top: Int): [Album]!

  song(songId: ID): Song
  songList(artistId: ID!, top: Int): [Song]!
}

type Mutation {
  createUser(userId: ID!): User
  updateUser(
    userId: ID!,
    artistId: ID
  ):User

  createArtist(
    name: String!,
    associatedUser: ID
  ): Artist

  updateArtist(
    artistId: ID!,
    name: String,
    associatedUser: ID
  ): Artist

  deleteArtist(
    artistId: ID!
  ): Artist

  # createSong
  # updateSong
  # deleteSong

  createAlbum(
    title: String!,
    description: String,
    artistId: ID!,
    artists: [String],
    isPublished: Boolean
  ): Album
  updateAlbum(
    title: String,
    description: String,
    artistId: ID
  ): Album
}

type User {
  userId: ID!
  artist: Artist
  joinedAt: Int
}

type Artist {
  artistId: ID!
  name: String!
  songs: [Song]
  albums: [Album]
  joinedAt: Int
  imageSources: [String]
  user: User
}

type Song {
  songId: ID
  title: String!
  artists: [String]!
  by: Artist
  audioSources: [String!]!
  imageSources: [String!]!
  createdAt: Int
}

type Album {
  albumId: ID!
  title: String!
  createdAt: Int!
  by: Artist!
  artists: [String]!
  songs: [Song!]!
}

schema {
  query: Query
  mutation: Mutation
}
