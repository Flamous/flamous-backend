service: flamous

app: flamous
tenant: christiankaindl

# Use the serverless-webpack plugin to transpile ES6
plugins:
  # - serverless-webpack
  - serverless-offline
  - serverless-appsync-plugin

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  # environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  appSync:
    name: ${self:custom.stage}-api
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: { Ref: CognitoUserPool }
    mappingTemplatesLocation: mapping-templates
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
      level: ALL
    mappingTemplates:
      - dataSource: usersTable
        type: Query
        field: user
        request: "user-request.vtl"
        response: "user-response.vtl"
      - dataSource: usersTable
        type: Mutation
        field: createUser
        request: "createUser-request.vtl"
        response: "createUser-response.vtl"
      - dataSource: usersTable
        type: Mutation
        field: updateUser
        request: "updateUser-request.vtl"
        response: "updateUser-response.vtl"

      - type: Mutation
        kind: PIPELINE
        field: createUserAndArtist
        request: createUserAndArtist-before.vtl
        response: createUserAndArtist-after.vtl
        functions:
          - createArtistFunction
          - createUserFunction

      - dataSource: artistsTable
        type: Mutation
        field: createArtist
        request: "createArtist-request.vtl"
        response: "createArtist-response.vtl"
      - dataSource: artistsTable
        type: Query
        field: artist
        request: "artist-request.vtl"
        response: "artist-response.vtl"
      - dataSource: artistsTable
        type: Mutation
        field: updateArtist
        request: "updateArtist-request.vtl"
        response: "updateArtist-response.vtl"

      - dataSource: albumsTable
        type: Query
        field: album
        request: album-request.vtl
        response: album-response.vtl
      - dataSource: albumsTable
        type: Mutation
        field: createAlbum
        request: createAlbum-request.vtl
        response: createAlbum-response.vtl
      - dataSource: albumsTable
        type: Mutation
        field: updateAlbum
        request: updateAlbum-request.vtl
        response: updateAlbum-response.vtl
      - type: Mutation
        field: deleteAlbum
        kind: PIPELINE
        request: deleteAlbum-before.vtl
        response: deleteAlbum-after.vtl
        functions:
          - deleteAlbumDataFunction
          - deleteAlbumCoverFunction
      - dataSource: albumsTable
        type: Query
        field: getArtistAlbums
        request: getArtistAlbums-request.vtl
        response: getArtistAlbums-response.vtl

      - dataSource: songsTable
        type: Query
        field: song
        request: "song-request.vtl"
        response: "song-response.vtl"
      - dataSource: songsTable
        type: Query
        field: songList
        request: "songList-request.vtl"
        response: "songList-response.vtl"
      - dataSource: songsTable
        type: Mutation
        field: createSong
        request: createSong-request.vtl
        response: createSong-response.vtl
      - dataSource: songsTable
        type: Mutation
        field: updateSong
        request: updateSong-request.vtl
        response: updateSong-response.vtl
    schema: schema.graphql
    functionConfigurations:
      - dataSource: usersTable
        name: createUserFunction
        request: "createUser-request.vtl"
        response: "createUser-response.vtl"
      - dataSource: artistsTable
        name: createArtistFunction
        request: "createArtist-request.vtl"
        response: "createArtist-response.vtl"
      - dataSource: albumsTable
        name: deleteAlbumDataFunction
        request: deleteAlbum-request.vtl
        response: deleteAlbum-response.vtl
      - dataSource: deleteAlbumCoverLambda
        name: delteAlbumCoverFunction
        request: deleteAlbumCover-request.vtl
        response: deleteAlbumCover-response.vtl

    dataSources:
      - type: AMAZON_DYNAMODB
        name: artistsTable
        config:
          tableName:
            Ref: ArtistsTable
      - type: AMAZON_DYNAMODB
        name: songsTable
        config:
          tableName:
            Ref: SongsTable
      - type: AMAZON_DYNAMODB
        name: albumsTable
        config:
          tableName:
            Ref: AlbumsTable
      - type: AMAZON_DYNAMODB
        name: usersTable
        config:
          tableName:
            Ref: UsersTable
      - type: AWS_LAMBDA
        name: deleteAlbumCoverFunction
        config:
          lambdaFunctionArn:
            Fn::GetAtt: [DeleteAlbumCoverLambdaFunction, Arn]

    # dataSources:
    #   - type: AMAZON_DYNAMODB | AMAZON_ELASTICSEARCH | AWS_LAMBDA
    #     name: myDynamoDB | myElasticSearch | myLambda
    #     config:
    #       tableName | endpoint | lambdaFunctionArn
    #       serviceRoleArn: IAM ROLE

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-central-1

functions:
  DeleteAlbumCover:
    role: AppSyncLambdaRole
    handler: functions/deleteAlbumCover.main

resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/roles.yml)}