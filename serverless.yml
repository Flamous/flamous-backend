service: flamous

app: flamous
tenant: christiankaindl

# Use the serverless-webpack plugin to transpile ES6
plugins:
  # - serverless-webpack
  - serverless-offline
  - serverless-appsync-plugin

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  # environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  appSync:
    - name: ${self:custom.stage}-api
      authenticationType: AMAZON_COGNITO_USER_POOLS
      userPoolConfig:
        awsRegion: ${self:provider.region}
        defaultAction: ALLOW
        userPoolId: { Ref: CognitoUserPool }
      mappingTemplatesLocation: mapping-templates
      logConfig:
        loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
        level: ALL
      mappingTemplates:
        - dataSource: artistsTable
          type: Mutation
          field: createArtist
          request: "createArtist-request.vlt"
          response: "createArtist-response.vlt"
      schema: schema.graphql
      dataSources:
        - type: AMAZON_DYNAMODB
          name: artistsTable
          config:
            tableName:
              Ref: ArtistsTable
    - name: ${self:custom.stage}-public-api
      authenticationType: API_KEY
      schema: public-schema.graphql
      logConfig:
        loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
        level: ALL
      mappingTemplatesLocation: mapping-templates-public
      mappingTemplates:
        - dataSource: artistsTable
          type: Query
          field: artist
          request: "artist-request.vlt"
          response: "artist-response.vlt"
        - dataSource: artistsTable
          type: Query
          field: artistList
          request: "artistList-request.vlt"
          response: "artistList-response.vlt"

        - dataSource: songsTable
          type: Query
          field: song
          request: "song-request.vlt"
          response: "song-response.vlt"
        - dataSource: songsTable
          type: Query
          field: songList
          request: "songList-request.vlt"
          response: "songList-response.vlt"
      dataSources:
        - type: AMAZON_DYNAMODB
          name: artistsTable
          config:
            tableName:
              Ref: ArtistsTable
        - type: AMAZON_DYNAMODB
          name: songsTable
          config:
            tableName:
              Ref: SongsTable
        - type: AMAZON_DYNAMODB
          name: albumsTable
          config:
            tableName:
              Ref: AlbumsTable

    # dataSources:
    #   - type: AMAZON_DYNAMODB | AMAZON_ELASTICSEARCH | AWS_LAMBDA
    #     name: myDynamoDB | myElasticSearch | myLambda
    #     config:
    #       tableName | endpoint | lambdaFunctionArn
    #       serviceRoleArn: IAM ROLE

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-central-1

# functions:
#   graphql:
#     handler: handler.graphql
#     events:
#       - http:
#           path: graphql
#           method: get
#           cors: true

resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/roles.yml)}